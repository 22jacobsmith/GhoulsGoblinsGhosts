
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Ghouls Goblins Ghosts EDA
> 
> # data imputation
> 
> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.4     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks readr::spec()
✖ recipes::step()   masks stats::step()
• Use tidymodels_prefer() to resolve common conflicts.
> library(vroom)

Attaching package: ‘vroom’

The following object is masked from ‘package:yardstick’:

    spec

The following object is masked from ‘package:scales’:

    col_factor

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(embed)
> # read in data
> train <- vroom("train.csv")
Rows: 371 Columns: 7
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (2): color, type
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> test <- vroom("test.csv")
Rows: 529 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr (1): color
dbl (5): id, bone_length, rotting_flesh, hair_length, has_soul

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> 
> 
> 
> boost_recipe <- recipe(type~., data=train) %>%
+   step_normalize(all_numeric_predictors()) %>%
+   step_dummy(all_nominal_predictors())
> 
> 
> 
> 
> boost_mod <- boost_tree(trees= tune(), tree_depth = tune(),
+                         learn_rate = tune()) %>% # set or tune
+   set_mode("classification") %>%
+   set_engine("xgboost")
> 
> 
> boost_wf <- 
+   workflow() %>%
+   add_recipe(boost_recipe) %>%
+   add_model(boost_mod)
> 
> ## set up a tuning grid
> tuning_grid <-
+   grid_regular(trees(),
+                tree_depth(),
+                learn_rate(),
+                levels = 10)
> 
> ## split into folds
> folds <- vfold_cv(train, v = 5, repeats = 1)
> 
> # run cv
> 
> CV_results <-
+   boost_wf %>%
+   tune_grid(resamples = folds,
+             grid = tuning_grid,
+             metrics = metric_set(accuracy))
> 
> # find best tuning parm values
> 
> best_tune <-
+   CV_results %>%
+   select_best("accuracy")
> 
> # finalize wf and get preds
> 
> final_wf <-
+   boost_wf %>%
+   finalize_workflow(best_tune) %>%
+   fit(data = train)
> 
> boost_preds <-
+   final_wf %>%
+   predict(new_data = test, type = "class")
> 
> # prepare and export preds to csv for kaggle
> 
> boost_output <- tibble(id = test$id, type = boost_preds$.pred_class)
> 
> 
> vroom_write(boost_output, "GGG_BoostPreds.csv", delim = ",")
> 
> 
> proc.time()
    user   system  elapsed 
2940.760   28.236 1604.596 
